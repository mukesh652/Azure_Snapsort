import argparse
import os
from azure.identity import AzureCliCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.compute.models import DiskCreateOption
from azure.common.credentials import ServicePrincipalCredentials
from datetime import datetime
import collections
import datetime
import time
import sys
import os.path
from os import path
import subprocess

#today = datetime.date.today()
today_string = time.strftime('%Y%m%d_%H%M%S')

clientid=''
secret=''
tenantid=''
#vmname=''
#group_name=''
subscriptionid=''

credential = ServicePrincipalCredentials(
client_id=clientid,
secret=secret,
tenant=tenantid
)
compute_client = ComputeManagementClient(credential, subscriptionid)
#print(compute_client)

def get_vm_status(vmname,group_name):
    vm = compute_client.virtual_machines.get(group_name, vmname, expand='instanceView')
    vm_status = compute_client.virtual_machines.instance_view(group_name,vmname).statuses[1].code
    return vm_status.split("/")[-1]

def stop_vm(vmname,group_name):
   stop_output = compute_client.virtual_machines.power_off(group_name,vmname, expand='instanceView')
   stop_output.wait()
   return stop_output

def start_vm(vmname,group_name):
   start_output = compute_client.virtual_machines.start(group_name,vmname, expand='instanceView')
   start_output.wait()
   return start_output

def snap_vm(vmname,group_name):
    vm = compute_client.virtual_machines.get(group_name, vmname, expand='instanceView')
    location = vm.location
    disk_dict= {'vmname':[],'disks':[]}
    disk_list=[]
    print("**********************!!!!!!!!!!")
    print("OS Disk ID")
    print(vm.storage_profile.os_disk.managed_disk.id)
    print("**********************!!!!!!!!!!")
    print()
    print("**********************!!!!!!!!!!")
    disk_list.append(vm.storage_profile.os_disk.managed_disk.id)
    disk_dict["vmname"].append("vm.name")
    disk_dict["disks"].append("vm.storage_profile.os_disk.managed_disk.name")
    print("Data Disk ID")
    ab = vm.storage_profile.data_disks
    for a in ab:
      print(a.managed_disk.id)
      disk_list.append(a.managed_disk.id)
      disk_dict["vmname"].append("vm.name")
      disk_dict["disks"].append("a.managed_disk.name")
    #print(disk_list)
    print("**********************!!!!!!!!!!")
    print()
    print("**********************!!!!!!!!!!")
    print("Starting Snapshot")
    for i in disk_list:
      disk_detail = i.split("/")
      disk_name = disk_detail[-1]
      snapname = vmname + "_" + disk_name + "_" + today_string
      async_snapshot_creation = compute_client.snapshots.create_or_update(
          group_name,
          snapname,
          {
              'location': location,
              'tags': {'mytag':'mytag'},
              'creation_data':{
                  'create_option':'Copy',
#                  'source_uri':'',
                  'source_uri':i
                  }
           }
      )
      print("Snapshot " + snapname + " created successfully!!!")
    print("Snapshot Completed")
    print("**********************!!!!!!!!!!")


my_vms=[]
f1=open("rname.txt","r")
my_vms=f1.readline().split(",")
del my_vms[-1]
print(my_vms)

vms = compute_client.virtual_machines.list_all()
print(vms)
for vm in vms:
    myvm_resource_group=""
    if vm.name in my_vms:
        print(vm.id)
        print(vm.name)
        temp_id_list=vm.id.split('/')
        myvm_resource_group=temp_id_list[4]
        print(myvm_resource_group)
        print("**********************!!!!!!!!!!")
        vm_status = get_vm_status(vm.name,myvm_resource_group)
        print(vm.name + " is currently " + vm_status)
        print("**********************!!!!!!!!!!")
        if vm_status=="running":
           print("Stopping " + vm.name + " " + stop_vm(vm.name,myvm_resource_group).status())
        print("**********************!!!!!!!!!!")
        snap_vm(vm.name,myvm_resource_group)
        vm_status = get_vm_status(vm.name,myvm_resource_group)
        if vm_status=="stopped":
           print("Starting " + vm.name + " " + start_vm(vm.name,myvm_resource_group).status())

